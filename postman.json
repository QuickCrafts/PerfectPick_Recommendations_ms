{
	"info": {
		"_postman_id": "54745958-65d2-44fa-bfac-a12faea7804c",
		"name": "PerfectPick_Recommendations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29396811"
	},
	"item": [
		{
			"name": "create_recommendations_for_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Data field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id_user\": 245564845,\r\n  \"movies\": [\r\n    1,5,66,45,23,98,56,43,45\r\n  ],\r\n  \"books\": [\r\n    2,44,78,98,54,33,50\r\n  ],\r\n  \"songs\": [\r\n    4,5,88,78,554,342\r\n  ],\r\n  \"created_at\": \"1710030501\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/recommendation/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"recommendation",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get_recommendations_for_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id_user is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  pm.expect(responseData.length).to.be.above(0);",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item).to.be.an('object');",
							"    pm.expect(item.id_user).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Movies, books, and songs are arrays\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (item) {",
							"        pm.expect(item.movies).to.be.an('array');",
							"        pm.expect(item.books).to.be.an('array');",
							"        pm.expect(item.songs).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Length of movies array is greater than 0\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.movies).to.exist.and.to.have.lengthOf.at.least(1, \"Movies array should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:80/recommendation/245564845",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"recommendation",
						"245564845"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_recommendation_for_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Data field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Data field is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"movies\": [\r\n    1\r\n  ],\r\n  \"books\": [\r\n    1\r\n  ],\r\n  \"songs\": [\r\n    1\r\n  ],\r\n  \"created_at\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/recommendation/245564845",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"recommendation",
						"245564845"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove_item_from_recommendation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the content type is 'application/json'\", function () {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"section\": \"movies\",\r\n  \"id_to_remove\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/recommendation/remove/245564845",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"recommendation",
						"remove",
						"245564845"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_recommendation_for_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "http://localhost:80/recommendation/245564845",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"recommendation",
						"245564845"
					]
				}
			},
			"response": []
		}
	]
}